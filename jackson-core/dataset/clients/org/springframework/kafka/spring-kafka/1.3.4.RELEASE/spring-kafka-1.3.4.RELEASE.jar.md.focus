org/springframework/kafka/listener/ConcurrentMessageListenerContainer/doStart()
org/springframework/kafka/support/DefaultKafkaHeaderMapper/trusted(java.lang.String)
org/springframework/kafka/config/KafkaListenerEndpointRegistrar/resolveContainerFactory(org.springframework.kafka.config.KafkaListenerEndpointRegistrar$KafkaListenerEndpointDescriptor)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/validateErrorHandler(boolean)
org/springframework/kafka/support/DefaultKafkaHeaderMapper/fromHeaders(org.springframework.messaging.MessageHeaders,org.apache.kafka.common.header.Headers)
org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor/resolvePartitionAsInteger(java.lang.String,java.lang.Object,java.util.List)
org/springframework/kafka/support/converter/BatchMessagingMessageConverter/toMessage(java.util.List,org.springframework.kafka.support.Acknowledgment,java.lang.reflect.Type)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/doInvokeWithRecords(org.apache.kafka.clients.consumer.ConsumerRecords)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/ackImmediate(org.apache.kafka.clients.consumer.ConsumerRecord)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/KafkaMessageListenerContainer$ListenerConsumer(org.springframework.kafka.listener.KafkaMessageListenerContainer,org.springframework.kafka.listener.GenericMessageListener,org.springframework.kafka.listener.GenericAcknowledgingMessageListener)
org/springframework/kafka/config/KafkaListenerEndpointRegistry/registerListenerContainer(org.springframework.kafka.config.KafkaListenerEndpoint,org.springframework.kafka.config.KafkaListenerContainerFactory,boolean)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/doInvokeBatchListener(org.apache.kafka.clients.consumer.ConsumerRecords,java.util.List,org.apache.kafka.clients.producer.Producer)
org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor/checkProxy(java.lang.reflect.Method,java.lang.Object)
org/springframework/kafka/support/LoggingProducerListener/onError(java.lang.String,java.lang.Integer,java.lang.Object,java.lang.Object,java.lang.Exception)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/seekPartitions(java.util.Collection,boolean)
org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor/postProcessAfterInitialization(java.lang.Object,java.lang.String)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/buildCommits()
org/springframework/kafka/core/KafkaTemplate$1/onCompletion(org.apache.kafka.clients.producer.RecordMetadata,java.lang.Exception)
org/springframework/kafka/listener/KafkaMessageListenerContainer/metrics()
org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor$KafkaHandlerMethodFactoryAdapter/createDefaultMessageHandlerMethodFactory()
org/springframework/kafka/listener/adapter/BatchMessagingMessageListenerAdapter/onMessage(java.util.List,org.springframework.kafka.support.Acknowledgment)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/innvokeRecordListenerInTx(org.apache.kafka.clients.consumer.ConsumerRecords)
org/springframework/kafka/core/KafkaTemplate/executeInTransaction(org.springframework.kafka.core.KafkaOperations$OperationsCallback)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer$2/onPartitionsAssigned(java.util.Collection)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/getHighestOffsetRecords(java.util.List)
org/springframework/kafka/listener/BatchLoggingErrorHandler/handle(java.lang.Exception,org.apache.kafka.clients.consumer.ConsumerRecords)
org/springframework/kafka/support/converter/MessagingMessageConverter/toMessage(org.apache.kafka.clients.consumer.ConsumerRecord,org.springframework.kafka.support.Acknowledgment,java.lang.reflect.Type)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/invokeBatchListenerInTx(org.apache.kafka.clients.consumer.ConsumerRecords,java.util.List)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/doInvokeRecordListener(org.apache.kafka.clients.consumer.ConsumerRecord,org.apache.kafka.clients.producer.Producer)
org/springframework/kafka/listener/adapter/DelegatingInvocableHandler/matchHandlerMethod(java.lang.Class,org.springframework.messaging.handler.invocation.InvocableHandlerMethod)
org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor/resolveTopicPartitionsList(org.springframework.kafka.annotation.TopicPartition)
org/springframework/kafka/listener/KafkaMessageListenerContainer/doStart()
org/springframework/kafka/support/DefaultKafkaHeaderMapper/DefaultKafkaHeaderMapper(com.fasterxml.jackson.databind.ObjectMapper,java.lang.String%5B%5D)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/run()
org/springframework/kafka/transaction/KafkaTransactionManager/doBegin(java.lang.Object,org.springframework.transaction.TransactionDefinition)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/processCommits()
org/springframework/kafka/listener/AbstractMessageListenerContainer/AbstractMessageListenerContainer(org.springframework.kafka.listener.config.ContainerProperties)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/initPartitionsIfNeeded()
org/springframework/kafka/listener/adapter/RecordMessagingMessageListenerAdapter/onMessage(org.apache.kafka.clients.consumer.ConsumerRecord,org.springframework.kafka.support.Acknowledgment)
org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor/afterSingletonsInstantiated()
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/commitIfNecessary()
org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor/processListener(org.springframework.kafka.config.MethodKafkaListenerEndpoint,org.springframework.kafka.annotation.KafkaListener,java.lang.Object,java.lang.Object,java.lang.String)
org/springframework/kafka/listener/adapter/DelegatingInvocableHandler/findHandlerForPayload(java.lang.Class)
org/springframework/kafka/core/KafkaAdmin/addTopicsIfNeeded(org.apache.kafka.clients.admin.AdminClient,java.util.Collection)
org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor/resolvePattern(org.springframework.kafka.annotation.KafkaListener)
org/springframework/kafka/listener/adapter/MessagingMessageListenerAdapter/determineInferredType(java.lang.reflect.Method)
org/springframework/kafka/listener/ConcurrentMessageListenerContainer/doStop(java.lang.Runnable)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/processSeeks()
org/springframework/kafka/core/DefaultKafkaProducerFactory/createTransactionalProducer()
org/springframework/kafka/config/KafkaListenerEndpointRegistry/createListenerContainer(org.springframework.kafka.config.KafkaListenerEndpoint,org.springframework.kafka.config.KafkaListenerContainerFactory)
org/springframework/kafka/config/AbstractKafkaListenerContainerFactory/createListenerContainer(org.springframework.kafka.config.KafkaListenerEndpoint)
org/springframework/kafka/listener/KafkaMessageListenerContainer$ListenerConsumer/addOffset(org.apache.kafka.clients.consumer.ConsumerRecord)
org/springframework/kafka/support/DefaultKafkaHeaderMapper/toHeaders(org.apache.kafka.common.header.Headers,java.util.Map)
