org/apereo/cas/services/AbstractRegisteredService/copyFrom(org.apereo.cas.services.RegisteredService)
org/apereo/cas/authentication/principal/DefaultResponse/getRedirectResponse(java.lang.String,java.util.Map)
org/apereo/cas/services/support/RegisteredServiceMappedRegexAttributeFilter/lambda$filter$1(java.util.Map,java.util.Map$Entry)
org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao/save(org.apereo.cas.services.RegisteredService)
org/apereo/cas/authentication/principal/AbstractServiceFactory/createService(java.lang.String,java.lang.Class)
org/apereo/cas/authentication/DefaultMultifactorTriggerSelectionStrategy/shouldApplyRegisteredServiceMultifactorPolicy(org.apereo.cas.services.RegisteredServiceMultifactorPolicy,org.apereo.cas.authentication.principal.Principal)
org/apereo/cas/authentication/DefaultMultifactorTriggerSelectionStrategy/resolve(java.util.Collection,javax.servlet.http.HttpServletRequest,org.apereo.cas.services.RegisteredService,org.apereo.cas.authentication.principal.Principal)
org/apereo/cas/services/ServiceRegistryConfigWatcher/handleModifyEvent(java.io.File)
org/apereo/cas/services/GroovyRegisteredServiceUsernameProvider/resolveUsernameFromExternalGroovyScript(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service)
org/apereo/cas/services/AbstractRegisteredService/compareTo(org.apereo.cas.services.RegisteredService)
org/apereo/cas/services/RegisteredServiceAccessStrategyUtils/ensureServiceSsoAccessIsAllowed(org.apereo.cas.services.RegisteredService,org.apereo.cas.authentication.principal.Service,org.apereo.cas.ticket.TicketGrantingTicket)
org/apereo/cas/services/DefaultServicesManager/load()
org/apereo/cas/services/ServiceRegistryConfigWatcher/ServiceRegistryConfigWatcher(org.apereo.cas.services.ResourceBasedServiceRegistryDao,org.springframework.context.ApplicationEventPublisher)
org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao/load()
org/apereo/cas/authentication/support/DefaultCasProtocolAttributeEncoder/sanitizeAndTransformAttributeNames(java.util.Map,org.apereo.cas.services.RegisteredService)
org/apereo/cas/authentication/principal/AbstractServiceFactory/createService(javax.servlet.http.HttpServletRequest,java.lang.Class)
org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao/makeFile(org.apereo.cas.services.RegisteredService)
org/apereo/cas/util/services/JasigRegisteredServiceDeserializationProblemHandler/handleUnknownProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer,java.lang.Object,java.lang.String)
org/apereo/cas/authentication/principal/DefaultWebApplicationResponseBuilderLocator/locate(org.apereo.cas.authentication.principal.WebApplicationService)
org/apereo/cas/authentication/support/AbstractProtocolAttributeEncoder/encodeAttributes(java.util.Map,org.apereo.cas.services.RegisteredService)
org/apereo/cas/services/RegisteredServicePublicKeyImpl/createInstance()
org/apereo/cas/services/ServiceRegistryConfigWatcher/handleCreateEvent(java.io.File)
org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao/initializeRegistry(java.nio.file.Path,org.apereo.cas.util.serialization.StringSerializer,boolean,org.springframework.context.ApplicationEventPublisher)
org/apereo/cas/services/PrincipalAttributeRegisteredServiceUsernameProvider/resolveUsernameInternal(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service)
org/apereo/cas/services/RegisteredServiceAccessStrategyUtils/ensurePrincipalAccessIsAllowedForService(org.apereo.cas.authentication.principal.Service,org.apereo.cas.services.RegisteredService,org.apereo.cas.authentication.Authentication)
org/apereo/cas/authentication/principal/ShibbolethCompatiblePersistentIdGenerator/generate(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service)
org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao/lambda$load$2(java.util.Map,java.io.File)
org/apereo/cas/services/support/RegisteredServiceRegexAttributeFilter/lambda$filter$1(java.util.Map,java.util.Map$Entry)
org/apereo/cas/services/ServiceRegistryConfigWatcher/lambda$handleEvent$1(java.nio.file.WatchKey,java.nio.file.WatchEvent)
org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao/load(java.io.File)
org/apereo/cas/services/RemoteEndpointServiceAccessStrategy/doPrincipalAttributesAllowServiceAccess(java.lang.String,java.util.Map)
org/apereo/cas/authentication/support/AbstractProtocolAttributeEncoder/initialize(java.util.Map)
org/apereo/cas/services/BaseRegisteredServiceUsernameAttributeProvider/resolveUsername(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service,org.apereo.cas.services.RegisteredService)
org/apereo/cas/services/ServiceRegistryInitializer/initServiceRegistryIfNecessary()
org/apereo/cas/services/PrincipalAttributeRegisteredServiceUsernameProvider/getPrincipalAttributes(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service)
