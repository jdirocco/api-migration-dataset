org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/lang/Byte/valueOf(byte)
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/nio/ByteBuffer/getShort()
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/nio/ByteBuffer/get()
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/ICMP6/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/put(byte[])
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/get()
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/rewind()
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/wrap(byte[])
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/putInt(int)
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/getShort()
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/putShort(int,short)
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/putShort(short)
org/onlab/packet/ICMP6/serialize()#java/nio/ByteBuffer/put(byte)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Stack/push(java.lang.Object)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#org/onlab/graph/DepthFirstSearch/checkArguments(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#org/onlab/graph/DepthFirstSearch$SpanningTreeResult/cost(org.onlab.graph.Vertex)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#org/onlab/graph/DepthFirstSearch$SpanningTreeResult/buildPaths()
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Iterator/next()
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Set/contains(java.lang.Object)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Stack/isEmpty()
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Set/add(java.lang.Object)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#org/onlab/graph/DepthFirstSearch$SpanningTreeResult/hasCost(org.onlab.graph.Vertex)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/lang/Object/equals(java.lang.Object)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Stack/Stack()
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Iterator/hasNext()
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Stack/pop()
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#org/onlab/graph/DepthFirstSearch$SpanningTreeResult/updateVertex(org.onlab.graph.Vertex,org.onlab.graph.Edge,double,boolean)
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Set/iterator()
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/HashSet/HashSet()
org/onlab/graph/DepthFirstSearch/search(org.onlab.graph.Graph,org.onlab.graph.Vertex,org.onlab.graph.Vertex,org.onlab.graph.EdgeWeight,int)#java/util/Stack/peek()
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/nio/ByteBuffer/get(byte[],int,int)
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/lang/Byte/valueOf(byte)
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/nio/ByteBuffer/get()
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/ipv6/BaseOptions/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/lang/Integer/intValue()
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/util/Iterator/hasNext()
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/lang/StringBuffer/length()
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/util/Iterator/next()
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/lang/StringBuffer/toString()
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/lang/StringBuffer/StringBuffer()
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/lang/StringBuffer/replace(int,int,java.lang.String)
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/util/Collection/iterator()
org/onlab/packet/IPv4/fromIPv4AddressCollection(java.util.Collection)#java/lang/StringBuffer/append(java.lang.String)
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/lang/Byte/valueOf(byte)
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/nio/ByteBuffer/get(byte[])
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/nio/ByteBuffer/getInt()
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/nio/ByteBuffer/getShort()
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/nio/ByteBuffer/get()
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/IPv4/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/nio/ByteBuffer/get(byte[],int,int)
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/lang/Byte/valueOf(byte)
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/nio/ByteBuffer/getInt()
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/nio/ByteBuffer/getShort()
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/nio/ByteBuffer/get()
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/IPv6/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/nio/ByteBuffer/get(byte[],int,int)
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/lang/Byte/valueOf(byte)
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/nio/ByteBuffer/getInt()
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/nio/ByteBuffer/getShort()
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/nio/ByteBuffer/get()
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/ipv6/Authentication/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/lang/reflect/Constructor/newInstance(java.lang.Object[])
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/lang/Short/valueOf(short)
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/lang/Class/getConstructor(java.lang.Class[])
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/nio/ByteBuffer/getShort()
org/onlab/packet/UDP/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/put(byte[])
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/get()
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/rewind()
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/wrap(byte[])
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/putInt(int)
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/allocate(int)
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/putShort(int,short)
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/putShort(short)
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/put(byte)
org/onlab/packet/UDP/serialize()#java/nio/ByteBuffer/getShort()
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/put(byte[])
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/get()
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/rewind()
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/wrap(byte[])
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/putInt(int)
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/allocate(int)
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/putShort(int,short)
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/putShort(short)
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/put(byte)
org/onlab/packet/TCP/serialize()#java/nio/ByteBuffer/getShort()
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/lang/Byte/valueOf(byte)
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/nio/ByteBuffer/getInt()
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/MPLS/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/lang/Object/equals(java.lang.Object)
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/util/Iterator/hasNext()
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/util/Set/size()
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/util/Map/get(java.lang.Object)
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/util/Iterator/next()
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/util/Set/isEmpty()
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/util/Set/iterator()
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/util/HashSet/HashSet()
org/onlab/graph/AbstractGraphPathSearch/buildAllPaths(org.onlab.graph.AbstractGraphPathSearch$DefaultResult,org.onlab.graph.Vertex,org.onlab.graph.Vertex,int)#java/util/Set/add(java.lang.Object)
org/onlab/packet/DHCP/serialize()#java/nio/ByteBuffer/put(byte[])
org/onlab/packet/DHCP/serialize()#java/util/Iterator/hasNext()
org/onlab/packet/DHCP/serialize()#org/onlab/packet/DHCP/resetChecksum()
org/onlab/packet/DHCP/serialize()#java/util/Iterator/next()
org/onlab/packet/DHCP/serialize()#java/nio/ByteBuffer/wrap(byte[])
org/onlab/packet/DHCP/serialize()#java/util/List/iterator()
org/onlab/packet/DHCP/serialize()#java/nio/ByteBuffer/putInt(int)
org/onlab/packet/DHCP/serialize()#java/nio/ByteBuffer/putShort(short)
org/onlab/packet/DHCP/serialize()#java/nio/ByteBuffer/put(byte)
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/nio/ByteBuffer/get(byte[])
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/lang/Short/valueOf(short)
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/nio/ByteBuffer/getShort()
org/onlab/packet/Ethernet/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#java/lang/StringBuilder/append(java.lang.String)
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#com/google/common/util/concurrent/ThreadFactoryBuilder/ThreadFactoryBuilder()
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#com/google/common/util/concurrent/ThreadFactoryBuilder/setNameFormat(java.lang.String)
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#com/google/common/util/concurrent/ThreadFactoryBuilder/setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#java/lang/StringBuilder/StringBuilder()
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#java/lang/String/replace(java.lang.CharSequence,java.lang.CharSequence)
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#com/google/common/util/concurrent/ThreadFactoryBuilder/build()
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#com/google/common/util/concurrent/ThreadFactoryBuilder/setThreadFactory(java.util.concurrent.ThreadFactory)
org/onlab/util/Tools/groupedThreads(java.lang.String,java.lang.String)#java/lang/StringBuilder/toString()
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/nio/ByteBuffer/get(byte[],int,int)
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/lang/Byte/valueOf(byte)
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/nio/ByteBuffer/get()
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/ipv6/Routing/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
org/onlab/util/KryoNamespace/create()#java/util/Iterator/hasNext()
org/onlab/util/KryoNamespace/create()#org/apache/commons/lang3/tuple/Pair/getRight()
org/onlab/util/KryoNamespace/create()#com/esotericsoftware/kryo/Kryo/setRegistrationRequired(boolean)
org/onlab/util/KryoNamespace/create()#java/util/Iterator/next()
org/onlab/util/KryoNamespace/create()#org/apache/commons/lang3/tuple/Pair/getLeft()
org/onlab/util/KryoNamespace/create()#com/esotericsoftware/kryo/Kryo/getNextRegistrationId()
org/onlab/util/KryoNamespace/create()#com/google/common/collect/ImmutableList/iterator()
org/onlab/util/KryoNamespace/create()#com/esotericsoftware/kryo/Kryo/register(java.lang.Class,int)
org/onlab/util/KryoNamespace/create()#com/esotericsoftware/kryo/Kryo/Kryo()
org/onlab/util/KryoNamespace/create()#com/esotericsoftware/kryo/Kryo/register(java.lang.Class,com.esotericsoftware.kryo.Serializer,int)
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/nio/ByteBuffer/position()
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/lang/Class/newInstance()
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/lang/Byte/valueOf(byte)
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/util/Map/get(java.lang.Object)
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/nio/ByteBuffer/getInt()
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/util/Map/containsKey(java.lang.Object)
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/lang/RuntimeException/RuntimeException(java.lang.String,java.lang.Throwable)
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/nio/ByteBuffer/getShort()
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/nio/ByteBuffer/get()
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/nio/ByteBuffer/wrap(byte[],int,int)
org/onlab/packet/ipv6/Fragment/deserialize(byte[],int,int)#java/nio/ByteBuffer/limit()
