io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/runtime/BoxesRunTime/unboxToLong(java.lang.Object)
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/concurrent/stm/Ref/$minus$eq(java.lang.Object,java.lang.Object,scala.math.Numeric)
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/collection/TraversableLike/splitAt(int)
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/Tuple2/_1()
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/Tuple2/_2()
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/MatchError/MatchError(java.lang.Object)
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/concurrent/stm/Ref/apply(java.lang.Object)
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/concurrent/stm/Ref/update(java.lang.Object,java.lang.Object)
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/collection/immutable/Queue/size()
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#scala/runtime/BoxesRunTime/boxToLong(long)
io/scalac/amqp/impl/QueueSubscription$$anonfun$io$scalac$amqp$impl$QueueSubscription$$deliverRequested$1/apply(scala.concurrent.stm.InTxn)#com/google/common/primitives/Ints/saturatedCast(long)
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/concurrent/stm/Ref/apply(java.lang.Object)
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/Predef$/wrapRefArray(java.lang.Object[])
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/StringContext/StringContext(scala.collection.Seq)
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/runtime/BoxesRunTime/boxToInteger(int)
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/collection/mutable/StringBuilder/append(java.lang.Object)
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/collection/mutable/StringBuilder/StringBuilder()
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/Predef$/genericWrapArray(java.lang.Object)
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/StringContext/s(scala.collection.Seq)
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/collection/mutable/StringBuilder/toString()
io/scalac/amqp/impl/QueueSubscription$$anonfun$toString$1/apply(scala.concurrent.stm.InTxn)#scala/collection/SeqLike/size()
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#com/typesafe/config/Config/getBoolean(java.lang.String)
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#java/lang/Object/equals(java.lang.Object)
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#java/lang/String/toLowerCase()
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#scala/Predef$/fallbackStringCanBuildFrom()
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#com/typesafe/config/Config/getConfigList(java.lang.String)
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#scala/Some/Some(java.lang.Object)
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#com/typesafe/config/Config/getString(java.lang.String)
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#scala/collection/package$/breakOut(scala.collection.generic.CanBuildFrom)
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#scala/collection/convert/Decorators$AsScala/asScala()
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#scala/collection/JavaConverters$/asScalaBufferConverter(java.util.List)
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#scala/concurrent/duration/Duration$/Inf()
io/scalac/amqp/ConnectionSettings$/apply(com.typesafe.config.Config)#scala/collection/TraversableLike/map(scala.Function1,scala.collection.generic.CanBuildFrom)
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getDeliveryMode()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#scala/Predef$/wrapByteArray(byte[])
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getType()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getAppId()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getCorrelationId()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getReplyTo()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getHeaders()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getContentEncoding()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getExpiration()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#scala/Option/getOrElse(scala.Function0)
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getContentType()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getTimestamp()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getMessageId()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getPriority()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#scala/Option$/apply(java.lang.Object)
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#com/rabbitmq/client/AMQP$BasicProperties/getUserId()
io/scalac/amqp/impl/Conversions$/toMessage(com.rabbitmq.client.AMQP$BasicProperties,byte[])#scala/Option/map(scala.Function1)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/Some/x()
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/concurrent/duration/Duration/toMillis()
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/setRequestedHeartbeat(int)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/setConnectionTimeout(int)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/concurrent/duration/FiniteDuration/toMillis()
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/concurrent/duration/FiniteDuration/toSeconds()
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/Tuple2/Tuple2(java.lang.Object,java.lang.Object)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/setAutomaticRecoveryEnabled(boolean)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#java/lang/Object/equals(java.lang.Object)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/concurrent/duration/Duration/isFinite()
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/setNetworkRecoveryInterval(long)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/setVirtualHost(java.lang.String)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/Tuple2/_1()
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/Tuple2/_2()
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/ConnectionFactory()
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/setUsername(java.lang.String)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/useSslProtocol(javax.net.ssl.SSLContext)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/setPassword(java.lang.String)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#scala/MatchError/MatchError(java.lang.Object)
io/scalac/amqp/impl/Conversions$/toConnectionFactory(io.scalac.amqp.ConnectionSettings)#com/rabbitmq/client/ConnectionFactory/useSslProtocol(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/type(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/messageId(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/replyTo(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/userId(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/AMQP$BasicProperties$Builder()
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/expiration(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#scala/Predef$/$conforms()
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/deliveryMode(java.lang.Integer)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/appId(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#scala/collection/convert/Decorators$AsJava/asJava()
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/correlationId(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/priority(java.lang.Integer)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#scala/Option/orNull(scala.Predef$$less$colon$less)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#scala/Option/map(scala.Function1)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/contentEncoding(java.lang.String)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#scala/collection/JavaConverters$/mapAsJavaMapConverter(scala.collection.Map)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/timestamp(java.util.Date)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/build()
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/headers(java.util.Map)
io/scalac/amqp/impl/Conversions$/toBasicProperties(io.scalac.amqp.Message)#com/rabbitmq/client/AMQP$BasicProperties$Builder/contentType(java.lang.String)
io/scalac/amqp/impl/QueueSubscription/request(long)#scala/runtime/BoxesRunTime/unboxToLong(java.lang.Object)
io/scalac/amqp/impl/QueueSubscription/request(long)#scala/Option/isEmpty()
io/scalac/amqp/impl/QueueSubscription/request(long)#scala/concurrent/Future$/apply(scala.Function0,scala.concurrent.ExecutionContext)
io/scalac/amqp/impl/QueueSubscription/request(long)#scala/concurrent/stm/Ref/single()
io/scalac/amqp/impl/QueueSubscription/request(long)#scala/concurrent/stm/Ref$View/transformAndGet(scala.Function1)
io/scalac/amqp/impl/QueueSubscription/request(long)#java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)
io/scalac/amqp/impl/QueueSubscription/request(long)#com/rabbitmq/client/Channel/isOpen()
io/scalac/amqp/impl/QueueSubscription/request(long)#org/reactivestreams/Subscriber/onError(java.lang.Throwable)
io/scalac/amqp/impl/QueueSubscription/request(long)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
io/scalac/amqp/impl/QueueSubscription/request(long)#scala/util/control/NonFatal$/unapply(java.lang.Throwable)
io/scalac/amqp/impl/QueueSubscription/request(long)#scala/concurrent/ExecutionContext$Implicits$/global()
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/util/Failure/exception()
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#com/rabbitmq/client/Channel/basicQos(int)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/collection/immutable/Set/contains(java.lang.Object)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/Option/isEmpty()
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/concurrent/stm/Ref/single()
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/MatchError/MatchError(java.lang.Object)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/util/Success/value()
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/Option/get()
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#java/lang/IllegalStateException/IllegalStateException(java.lang.String)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#org/reactivestreams/Subscriber/onSubscribe(org.reactivestreams.Subscription)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/util/control/NonFatal$/unapply(java.lang.Throwable)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/Predef$/wrapRefArray(java.lang.Object[])
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#com/rabbitmq/client/Channel/basicConsume(java.lang.String,boolean,java.lang.String,boolean,boolean,java.util.Map,com.rabbitmq.client.Consumer)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/util/Try$/apply(scala.Function0)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/StringContext/StringContext(scala.collection.Seq)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#com/rabbitmq/client/Channel/addShutdownListener(com.rabbitmq.client.ShutdownListener)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/concurrent/stm/Ref$View/getAndTransform(scala.Function1)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/Predef$/genericWrapArray(java.lang.Object)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#scala/StringContext/s(scala.collection.Seq)
io/scalac/amqp/impl/QueuePublisher/subscribe(org.reactivestreams.Subscriber)#org/reactivestreams/Subscriber/onError(java.lang.Throwable)
