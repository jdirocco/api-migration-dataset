org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/Integer/intValue()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setLogoutUrl(java.net.URL)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setRequiredHandlers(java.util.HashSet)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setInformationUrl(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setAttributeReleasePolicy(org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apache/commons/lang3/StringUtils/defaultIfBlank(java.lang.CharSequence,java.lang.CharSequence)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setTheme(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setEvaluationOrder(int)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setAccessStrategy(org.apereo.cas.services.RegisteredServiceAccessStrategy)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/RegexRegisteredService/RegexRegisteredService()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setServiceId(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setLogoutType(org.apereo.cas.services.RegisteredService$LogoutType)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#com/esotericsoftware/kryo/Kryo/readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setDescription(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setId(long)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setProxyPolicy(org.apereo.cas.services.RegisteredServiceProxyPolicy)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setMultifactorPolicy(org.apereo.cas.services.RegisteredServiceMultifactorPolicy)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setUsernameAttributeProvider(org.apereo.cas.services.RegisteredServiceUsernameAttributeProvider)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setPublicKey(org.apereo.cas.services.RegisteredServicePublicKey)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setPrivacyUrl(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setName(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setLogo(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/services/AbstractRegisteredService/setProperties(java.util.Map)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/Long/longValue()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#java/lang/String/hashCode()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#java/lang/String/toLowerCase()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/slf4j/Logger/debug(java.lang.String,java.lang.Object)
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getTranscoderCompressionThreshold()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/isKryoAutoReset()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/apache/commons/lang3/StringUtils/trimToEmpty(java.lang.String)
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#net/spy/memcached/transcoders/WhalinTranscoder/setCompressionThreshold(int)
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#net/spy/memcached/transcoders/WhalinV1Transcoder/setCompressionThreshold(int)
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/apereo/cas/memcached/kryo/CasKryoTranscoder/CasKryoTranscoder(org.apereo.cas.memcached.kryo.CasKryoPool)
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#java/lang/Object/getClass()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#net/spy/memcached/transcoders/SerializingTranscoder/setCompressionThreshold(int)
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/isKryoRegistrationRequired()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getTranscoder()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/isKryoObjectsByReference()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#java/lang/String/equals(java.lang.Object)
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#java/lang/Class/getName()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#net/spy/memcached/transcoders/SerializingTranscoder/SerializingTranscoder()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#net/spy/memcached/transcoders/WhalinTranscoder/WhalinTranscoder()
org/apereo/cas/memcached/MemcachedUtils/newTranscoder(org.apereo.cas.configuration.model.support.memcached.BaseMemcachedProperties,java.util.Collection)#net/spy/memcached/transcoders/WhalinV1Transcoder/WhalinV1Transcoder()
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#org/slf4j/Logger/debug(java.lang.String)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#com/esotericsoftware/kryo/Kryo/register(java.lang.Class)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/guava/ImmutableListSerializer/registerSerializers(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/guava/ImmutableMultimapSerializer/registerSerializers(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/guava/ImmutableSetSerializer/registerSerializers(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/UnmodifiableCollectionsSerializer/registerSerializers(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#com/esotericsoftware/kryo/Kryo/register(java.lang.Class,com.esotericsoftware.kryo.Serializer)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#java/util/Collections/singletonMap(java.lang.Object,java.lang.Object)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/CollectionsEmptySetSerializer/CollectionsEmptySetSerializer()
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/guava/ImmutableMapSerializer/registerSerializers(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#java/util/Arrays/asList(java.lang.Object%5B%5D)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/CollectionsEmptyMapSerializer/CollectionsEmptyMapSerializer()
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#java/lang/Object/getClass()
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#java/util/Collections/singleton(java.lang.Object)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/ArraysAsListSerializer/ArraysAsListSerializer()
org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)#de/javakaffee/kryoserializers/CollectionsEmptyListSerializer/CollectionsEmptyListSerializer()
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/slf4j/Logger/warn(java.lang.String,java.lang.Object%5B%5D)
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/time/ZoneId/of(java.lang.String)
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/util/DateTimeUtils/zonedDateTimeOf(long,java.time.ZoneId)
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#com/esotericsoftware/kryo/Kryo/readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/Long/valueOf(long)
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/Long/longValue()
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/slf4j/Logger/trace(java.lang.String,java.lang.Object,java.lang.Object)
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/String/trim()
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/time/ZoneId/systemDefault()
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#org/apache/commons/lang3/StringUtils/removeAll(java.lang.String,java.lang.String)
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#com/esotericsoftware/kryo/io/Input/readString()
org/apereo/cas/memcached/kryo/serial/ZonedDateTimeSerializer/read(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/Exception/getMessage()
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#com/esotericsoftware/kryo/Kryo/setAutoReset(boolean)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerExpirationPoliciesWithKryo(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#com/esotericsoftware/kryo/Kryo$DefaultInstantiatorStrategy/Kryo$DefaultInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#java/lang/Boolean/valueOf(boolean)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerCasTicketsWithKryo(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/apereo/cas/memcached/kryo/CloseableKryo/CloseableKryo(org.apereo.cas.memcached.kryo.CasKryoPool)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#com/esotericsoftware/kryo/Kryo/setReferences(boolean)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#com/esotericsoftware/kryo/Kryo/setWarnUnregisteredClasses(boolean)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/slf4j/Logger/debug(java.lang.String)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/objenesis/strategy/StdInstantiatorStrategy/StdInstantiatorStrategy()
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerImmutableOrEmptyCollectionsWithKryo(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#java/util/Collection/forEach(java.util.function.Consumer)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/slf4j/Logger/debug(java.lang.String,java.lang.Object)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerCasAuthenticationWithKryo(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#com/esotericsoftware/kryo/Kryo/setRegistrationRequired(boolean)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerNativeJdkComponentsWithKryo(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#com/esotericsoftware/kryo/Kryo/setInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)
org/apereo/cas/memcached/kryo/CloseableKryoFactory/create()#org/apereo/cas/memcached/kryo/CloseableKryoFactory/registerCasServicesWithKryo(com.esotericsoftware.kryo.Kryo)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#com/esotericsoftware/kryo/Kryo/readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/StringBuilder/append(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/StringBuilder/StringBuilder()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/ClassCastException/ClassCastException(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/StringBuilder/toString()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/Class/forName(java.lang.String)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/Class/isAssignableFrom(java.lang.Class)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/StringBuilder/append(java.lang.Object)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/readObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Input,java.lang.Class)#java/lang/Object/getClass()
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#com/esotericsoftware/kryo/pool/KryoPool$Builder/KryoPool$Builder(com.esotericsoftware.kryo.pool.KryoFactory)
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#com/esotericsoftware/kryo/pool/KryoPool$Builder/softReferences()
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#com/esotericsoftware/kryo/pool/KryoPool$Builder/build()
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#org/apereo/cas/memcached/kryo/CloseableKryoFactory/setWarnUnregisteredClasses(boolean)
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#org/apereo/cas/memcached/kryo/CloseableKryoFactory/setReplaceObjectsByReferences(boolean)
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#org/apereo/cas/memcached/kryo/CloseableKryoFactory/CloseableKryoFactory(org.apereo.cas.memcached.kryo.CasKryoPool)
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#org/apereo/cas/memcached/kryo/CloseableKryoFactory/setRegistrationRequired(boolean)
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#java/lang/Object/Object()
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#org/apereo/cas/memcached/kryo/CloseableKryoFactory/setAutoReset(boolean)
org/apereo/cas/memcached/kryo/CasKryoPool/CasKryoPool(java.util.Collection,boolean,boolean,boolean,boolean)#org/apereo/cas/memcached/kryo/CloseableKryoFactory/setClassesToRegister(java.util.Collection)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getInformationUrl()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getLogoutType()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getTheme()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getPrivacyUrl()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#java/lang/Long/valueOf(long)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getServiceId()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/writeObjectByReflection(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,java.lang.Object)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#com/esotericsoftware/kryo/Kryo/writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getMultifactorPolicy()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getAccessStrategy()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getDescription()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getAttributeReleasePolicy()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apache/commons/lang3/ObjectUtils/defaultIfNull(java.lang.Object,java.lang.Object)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getRequiredHandlers()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/ReturnAllowedAttributeReleasePolicy/ReturnAllowedAttributeReleasePolicy()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getLogo()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getName()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#java/util/HashMap/HashMap(java.util.Map)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/DefaultRegisteredServiceMultifactorPolicy/DefaultRegisteredServiceMultifactorPolicy()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getEvaluationOrder()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getPublicKey()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/getEmptyUrl()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getUsernameAttributeProvider()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getProperties()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getId()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#java/lang/Integer/valueOf(int)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getProxyPolicy()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredServicePublicKeyImpl/RegisteredServicePublicKeyImpl()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apache/commons/lang3/StringUtils/defaultIfEmpty(java.lang.CharSequence,java.lang.CharSequence)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/DefaultRegisteredServiceUsernameProvider/DefaultRegisteredServiceUsernameProvider()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RefuseRegisteredServiceProxyPolicy/RefuseRegisteredServiceProxyPolicy()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/DefaultRegisteredServiceAccessStrategy/DefaultRegisteredServiceAccessStrategy()
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#java/util/HashSet/HashSet(java.util.Collection)
org/apereo/cas/memcached/kryo/serial/RegisteredServiceSerializer/write(com.esotericsoftware.kryo.Kryo,com.esotericsoftware.kryo.io.Output,org.apereo.cas.services.RegisteredService)#org/apereo/cas/services/RegisteredService/getLogoutUrl()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/FailureMode/valueOf(java.lang.String)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setShouldOptimize(boolean)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setShutdownTimeoutSeconds(long)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setHashAlg(net.spy.memcached.HashAlgorithm)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getTimeoutExceptionThreshold()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/isDaemon()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setTimeoutExceptionThreshold(int)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apache/commons/lang3/StringUtils/isNotBlank(java.lang.CharSequence)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/isUseNagleAlgorithm()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setServers(java.lang.String)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getFailureMode()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setTranscoder(net.spy.memcached.transcoders.Transcoder)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setFailureMode(net.spy.memcached.FailureMode)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setMaxReconnectDelay(long)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/DefaultHashAlgorithm/valueOf(java.lang.String)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setUseNagleAlgorithm(boolean)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getOpTimeout()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/MemcachedClientFactoryBean()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/ConnectionFactoryBuilder$Locator/valueOf(java.lang.String)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getHashAlgorithm()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setOpTimeout(long)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setDaemon(boolean)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getLocatorType()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/isShouldOptimize()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getServers()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getMaxReconnectDelay()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/afterPropertiesSet()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/setLocatorType(net.spy.memcached.ConnectionFactoryBuilder$Locator)
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#net/spy/memcached/spring/MemcachedClientFactoryBean/getObject()
org/apereo/cas/memcached/MemcachedPooledClientConnectionFactory/create()#org/apereo/cas/configuration/model/support/memcached/BaseMemcachedProperties/getShutdownTimeoutSeconds()
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#com/esotericsoftware/kryo/KryoException/KryoException(java.lang.Throwable)
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#com/esotericsoftware/kryo/io/Output/flush()
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#net/spy/memcached/CachedData/CachedData(int,byte%5B%5D,int)
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#org/apereo/cas/memcached/kryo/CloseableKryo/writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#org/apereo/cas/memcached/kryo/CasKryoPool/borrow()
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#org/slf4j/Logger/trace(java.lang.String,java.lang.Object)
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#java/lang/Object/getClass()
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#org/apereo/cas/memcached/kryo/CasKryoTranscoder/$closeResource(java.lang.Throwable,java.lang.AutoCloseable)
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#java/io/ByteArrayOutputStream/toByteArray()
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#java/io/ByteArrayOutputStream/ByteArrayOutputStream()
org/apereo/cas/memcached/kryo/CasKryoTranscoder/encode(java.lang.Object)#com/esotericsoftware/kryo/io/Output/Output(java.io.OutputStream)
