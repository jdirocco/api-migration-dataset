org/apereo/cas/services/RegisteredServicesEventListener/handleRegisteredServiceExpiredEvent(org.apereo.cas.support.events.service.CasRegisteredServiceExpiredEvent)
org/apereo/cas/services/RegisteredServicePublicKeyImpl/createInstance()
org/apereo/cas/services/ScriptedRegisteredServiceUsernameProvider/resolveUsernameInternal(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service,org.apereo.cas.services.RegisteredService)
org/apereo/cas/services/support/RegisteredServiceMutantRegexAttributeFilter/filter(java.util.Map)
org/apereo/cas/services/support/RegisteredServiceMutantRegexAttributeFilter/mapPattern(java.lang.Object)
org/apereo/cas/services/PrincipalAttributeRegisteredServiceUsernameProvider/getPrincipalAttributesFromReleasePolicy(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service,org.apereo.cas.services.RegisteredService)
org/apereo/cas/services/RegisteredServiceAccessStrategyUtils/ensurePrincipalAccessIsAllowedForService(org.apereo.cas.authentication.principal.Service,org.apereo.cas.services.RegisteredService,java.lang.String,java.util.Map)
org/apereo/cas/authentication/principal/ShibbolethCompatiblePersistentIdGenerator/generate(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service)
org/apereo/cas/services/util/CasAddonsRegisteredServicesJsonSerializer/convertServiceProperties(java.util.Map)
org/apereo/cas/services/support/RegisteredServiceRegexAttributeFilter/lambda$filter$1(java.util.Map,java.util.Map$Entry)
org/apereo/cas/services/util/JasigRegisteredServiceDeserializationProblemHandler/handleUnknownProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer,java.lang.Object,java.lang.String)
org/apereo/cas/services/AbstractRegisteredService/compareTo(org.apereo.cas.services.RegisteredService)
org/apereo/cas/services/RemoteEndpointServiceAccessStrategy/doPrincipalAttributesAllowServiceAccess(java.lang.String,java.util.Map)
org/apereo/cas/services/RegisteredServiceAccessStrategyAuditableEnforcer/execute(org.apereo.cas.audit.AuditableContext)
org/apereo/cas/services/PrincipalAttributeRegisteredServiceUsernameProvider/resolveUsernameInternal(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service,org.apereo.cas.services.RegisteredService)
org/apereo/cas/services/GroovyRegisteredServiceUsernameProvider/resolveUsernameFromExternalGroovyScript(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service,java.lang.String)
org/apereo/cas/services/support/RegisteredServiceMutantRegexAttributeFilter/lambda$filterAndMapAttributeValuesByPattern$2(java.util.regex.Pattern,java.lang.String,java.util.List,java.lang.Object)
org/apereo/cas/services/support/RegisteredServiceMappedRegexAttributeFilter/filter(java.util.Map)
org/apereo/cas/services/RegisteredServiceAccessStrategyUtils/ensureServiceSsoAccessIsAllowed(org.apereo.cas.services.RegisteredService,org.apereo.cas.authentication.principal.Service,org.apereo.cas.ticket.TicketGrantingTicket,boolean)
org/apereo/cas/services/BaseRegisteredServiceUsernameAttributeProvider/resolveUsername(org.apereo.cas.authentication.principal.Principal,org.apereo.cas.authentication.principal.Service,org.apereo.cas.services.RegisteredService)
org/apereo/cas/services/support/RegisteredServiceMutantRegexAttributeFilter/lambda$filter$1(java.util.Map,java.util.Map$Entry)
org/apereo/cas/services/util/CasAddonsRegisteredServicesJsonSerializer/load(java.io.InputStream)
org/apereo/cas/services/util/CasAddonsRegisteredServicesJsonSerializer/lambda$load$0(org.apereo.cas.services.RegisteredService)
